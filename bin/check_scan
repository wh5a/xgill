#!/usr/bin/perl

# Sixgill: Static assertion checker for C/C++ programs.
# Copyright (C) 2009-2010  Stanford University
# Author: Brian Hackett
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# get a summary of assertions, reports and failures from an xcheck log.

my $usage = "USAGE: check_scan [-split | dir] < xcheck.log\n";

my $arg = shift or "";
my $dosplit = 0;
my $matchdir = "";

if ($arg eq "") {
}
elsif ($arg eq "-split") {
    $dosplit = 1;
}
else {
    $matchdir = $arg;
}

use strict;

my $redundant = 0;
my $assertion = 0;
my $success = 0;
my $report = 0;

my $fail_assert = 0;
my $fail_timeout = 0;
my $fail_crash = 0;
my $fail_conflict = 0;

my %report_hash;
my %total_hash;

my $max_report = 0;
my $max_total = 0;

my %kind_hash;

my $prev_fail_timeout = 0;
my $prev_fail_assert = 0;
my $prev_fail_conflict = 0;

while (my $line = <>) {
    $prev_fail_assert = 1 if ($line =~ /Assertion/ && $line =~ /failed\.$/);
    $prev_fail_timeout = 1 if ($line =~ /^ERROR: Analysis timed out/);
    $prev_fail_conflict = 1 if ($line =~ /^ERROR: Conflict between solvers/);

    if ($line =~ /terminated with code/) {
        if ($prev_fail_assert) {
            $fail_assert++;
        }
        elsif ($prev_fail_timeout) {
            $fail_timeout++;
        }
        elsif ($prev_fail_conflict) {
            $fail_conflict++;
        }
        else {
            $fail_crash++;
        }

        $prev_fail_assert = 0;
        $prev_fail_timeout = 0;
        $prev_fail_conflict = 0;
    }

    if ($line =~ /^REPORT ([^ ]+)/) {
        $kind_hash{$1}++;
    }

    if ($line =~ /^Finished:? (\'.*?\') FILE (.*?) REDUNDANT (\d+) ASSERTION (\d+) SUCCESS (\d+) REPORT (\d+)/) {
        my $func_name = $1;
        my $filename = $2;
        my $one_redundant = $3;
        my $one_assertion = $4;
        my $one_success = $5;
        my $one_report = $6;

        next if ($matchdir ne "" && !($filename =~ /^$matchdir\//));

        $redundant += $one_redundant;
        $assertion += $one_assertion;
        $success += $one_success;
        $report += $one_report;

        if ($dosplit) {
            while ($filename =~ /\//) {
                $filename =~ s/^(.*)\/[^\/]*$/$1/;

                $report_hash{$filename} += $one_report;
                $total_hash{$filename} += $one_redundant + $one_assertion;

                my $nesting = directory_nesting($filename);
                my $report_digit = num_digits($report_hash{$filename});
                my $total_digit = num_digits($total_hash{$filename});

                $max_report = max($max_report, $nesting + $report_digit);
                $max_total = max($max_total, $total_digit);
            }
        }
    }
}

if ($dosplit) {
    my @dir_list;
    my %dir_text;

    foreach my $key (keys %report_hash) {
        my $one_report = $report_hash{$key};
        my $one_total = $total_hash{$key};

        next if ($one_total == 0);

        my $nesting = directory_nesting($key);
        my $report_need = $max_report - $nesting - num_digits($one_report);
        my $total_need = $max_total - num_digits($one_total);

        my $nesting_pad = '|' x $nesting;
        my $report_pad = ' ' x $report_need;
        my $total_pad = ' ' x $total_need;

        my $text = "$nesting_pad  $report_pad$one_report / $total_pad$one_total";
        push(@dir_list, $key);
        $dir_text{$key} = $text;
    }

    my @sorted = sort @dir_list;

    foreach my $dir (@sorted) {
        my $text = $dir_text{$dir};
        print "$text : $dir\n";
    }
}

# avoid divide by zero
$assertion = 1 if ($assertion == 0);

my $all_ratio = ($success + $redundant) / ($assertion + $redundant);
my $ratio = $success / $assertion;

my $failures = $fail_assert + $fail_timeout + $fail_crash;

print "REDUNDANT  $redundant\n";
print "ASSERTIONS $assertion\n";
print "SUCCESS    $success\n";
print "REPORTS    $report\n";
print "FAILURES   $failures\n";
print "ALL_RATIO  $all_ratio\n";
print "RATIO      $ratio\n";

my $maxkind = 7;
foreach my $kind (keys %kind_hash) {
    $maxkind = max(length($kind), $maxkind);
}

foreach my $kind (keys %kind_hash) {
    my $count = $kind_hash{$kind};
    my $padding = ' ' x ($maxkind - length($kind));
    print "KIND $kind$padding : $count\n";
}

my $padding = ' ' x ($maxkind - 7);

print "FAIL Assert  $padding : $fail_assert\n";
print "FAIL Timeout $padding : $fail_timeout\n";
print "FAIL Crash   $padding : $fail_crash\n";
print "FAIL Conflict$padding : $fail_conflict\n" if ($fail_conflict);

sub max {
    my ($one,$two) = @_;
    return $one if ($one > $two);
    return $two;
}

sub directory_nesting {
    my ($file) = @_;

    my $nesting = 0;
    while ($file =~ /\//) {
        $file =~ s/^(.*)\/[^\/]*$/$1/;
        $nesting++;
    }

    return $nesting;
}

sub num_digits {
    my ($num) = @_;

    die if ($num < 0);
    return 1 if ($num == 0);

    my $digits = 0;
    while ($num > 0) {
        $digits++;
        $num = int($num / 10);
    }

    return $digits;
}
