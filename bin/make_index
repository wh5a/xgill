#!/usr/bin/perl

# Sixgill: Static assertion checker for C/C++ programs.
# Copyright (C) 2009-2010  Stanford University
# Author: Brian Hackett
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# make the index and all reports for a kind of assertion.

use strict;
use File::Basename;
use File::Copy;

my $usage = "USAGE: make_index kind\n";
my $assertkind = shift or die $usage;

# start with a fresh output directory.
system("rm -rf $assertkind") if (-d $assert_kind);
mkdir($assertkind);

# get all reports of the kind we are interested in.
my @reports = `xdbkeys report_$assertkind.xdb`;

# map from each file to the array of reports in that file
my %file_hash;

# map from each node in the tree to the directories/files in that node
my %subdir_hash;

# count for each node in the tree of the total number of reports
my %count_hash;

foreach my $report (@reports)
{
    chomp $report;

    $report =~ /(.*?)\$(.*?)\$(.*)/ or die;
    my $kind = $1;
    my $file = $2;
    my $name = $3;

    die unless ($assertkind eq $kind);

    push(@{$file_hash{$file}}, $name);

    my $node = $file;
    while ($node ne "") {
        $count_hash{$node}++;
        my $dirname = dirname($node);

        # if the file was relative (usually the case), treat the base
        # directory as the root directory.
        $dirname = "" if ($dirname eq ".");
        $dirname = "" if ($dirname eq "/");

        # add the node as a subdir if we didn't already have it.
        my $found = 0;
        for my $subdir (@{$subdir_hash{$dirname}}) {
            $found = 1 if ($subdir eq $node);
        }
        push(@{$subdir_hash{$dirname}}, $node) if (!$found);

        $node = $dirname;
    }
}

open(INDEX, "> $assertkind/index.html");

print INDEX <<EOF;

<html>
<head>

<style type="text/css">

a.dir {
    white-space: pre;
    font-family: monospace;
    text-decoration: none;
    color: black;
}

a.report {
    white-space: pre;
    font-weight: bold;
    text-decoration: none;
    color: blue;
}

span.errors {
    white-space: pre;
    font-family: monospace;
    color: red;
}

</style>

<script type="text/javascript">

function toggleDir(name)
{
    var dirItem = document.getElementById(name);

    if (dirItem.style.display == "none") {
        dirItem.style.display = "";
    }
    else {
        dirItem.style.display = "none";
    }

    return false;
}

</script>

</head>
<body>

EOF

print INDEX "<h2>$code_name reports</h2>\n";

my %next_hash;
my %prev_hash;

my $last_name = "";

recursive_traverse("", 0);

sub recursive_traverse {
    my ($node, $padding) = @_;

    # replace non-alphanumeric chars in the pathname with '_' to get the node ID.
    my $nodeid = $node;
    $nodeid =~ s/[^a-zA-Z0-9]/_/g;

    # if this has a single subdirectory, recurse directly on that subdirectory
    # and don't print anything here.
    if (defined $subdir_hash{$node}) {
        my @subdirs = sort @{$subdir_hash{$node}};
        if (scalar(@subdirs) == 1) {
            my $subdir = pop @subdirs or die;
            recursive_traverse($subdir, $padding);
            return;
        }
    }

    # skip printing anything for the top level directory.
    if ($node ne "") {
        my $count = $count_hash{$node};
        my $errors = (" " x $padding) . "$count";

        # pad the string so that there are always 5 chars
        # for the count and the filenames themselves are aligned.
        $errors .= " " x ($padding + 5 - length($errors));

        print INDEX "<span class='errors'>$errors</span>";
        print INDEX "<a href='#' class='dir' onClick='return toggleDir(\"" . $nodeid . "\")'>$node</a><br>\n";
        print INDEX "<div id='" . $nodeid . "' style='display:none'>\n";
    }

    if (defined $subdir_hash{$node}) {
        my @subdirs = sort @{$subdir_hash{$node}};
        for my $subdir (@subdirs) {
            recursive_traverse($subdir, $padding + 2);
        }
    }

    if (defined $file_hash{$node}) {
        my @names = sort @{$file_hash{$node}};

        # figure out which names are duplicates. these will be adjacent to each other
        # in the sorted list of reports.
        my %duplicates;
        my $last = "";
        for my $name (@names) {
            my $namestr = report_printable($name);
            $duplicates{$namestr} = 1 if ($namestr eq $last);
            $last = $namestr;
        }

        $last = "";
        my $last_count = 0;

        for my $name (@names) {
            my $nameid = report_file($name);
            my $namestr = report_printable($name);

            if ($last eq $namestr) {
                $last_count++;
                $namestr .= " #$last_count";
            }
            else {
                $last = $namestr;
                $last_count = 1;
                $namestr .= " #1" if ($duplicates{$namestr} == 1);
            }

            my $padstr = " " x ($padding + 2);

            if ($last_name ne "") {
                $next_hash{$last_name} = $nameid;
                $prev_hash{$nameid} = $last_name;
            }
            $last_name = $nameid;

            print INDEX "<span class='errors'>$padstr</span>";
            print INDEX "<a href='reports/$nameid.html' class='report'>$namestr</a><br>\n";
        }
    }

    if ($node ne "") {
        print INDEX "</div>\n";
    }
}

print INDEX "</body>\n";
print INDEX "</html>\n";

close INDEX;

print "Wrote $assertkind/index.html\n";

foreach my $report (@reports)
{
    chomp $report;

    $report =~ /([^\$]+)\$(.*)/ or die;
    my $name = $2;
    my $nameid = report_file($name);

    my $output = "$assertkind/$nameid.html";

    # check for a name collision
    die "Duplicate output files: $nameid\n" if (-e $output);

    my $prevlink = $prev_hash{$nameid};
    my $nextlink = $next_hash{$nameid};

    $prevlink = "none" if ($prevlink eq "");
    $nextlink = "none" if ($nextlink eq "");

    my $retcode = system("xdbfind -plain-text check_reports.xdb '$report' | make_report $code_name $prevlink $nextlink > $output");

    if ($retcode ne 0) {
        print "Failed on '$report'\n";
        die;
    }

    print("Wrote report to $output\n");
}

# get the printable version of a report, stripping file and assert
# identifier info.
sub report_printable {
    my ($name) = @_;

    # report names look like 'name$loop?$assert' or 'file:name$loop?$assert'
    # where the name can look like:
    # foo(arg_types)       (Elsa frontend)
    # foo                  (GCC frontend with C linkage)
    # type foo(arg_types)  (GCC frontend with C++ linkage)

    # eat everything after a '$'.
    $name =~ s/\$.*$//;

    # eat everything after a '(' - argument types. watch out for '(!'
    # which shows up in some GCC template instantiations.
    $name =~ s/\([^\!].*$//;

    # eat everything up to a ' ' - return type.
    $name =~ s/[^ <]* //;

    # eat a leading 'file:', but preserve 'class::'
    $name =~ s/^[^:\(]*:([^:])/$1/;

    return $name;
}

# get the name of the file used to print the specified report.
sub report_file {
    my ($name) = @_;

    # use the printable name of the report followed by a hash of
    # the whole string. if we don't use the hash we run into
    # file length restrictions.
    my $namestr = report_printable($name);
    $namestr =~ s/[^a-zA-Z0-9]/_/g;

    my $hash = string_hash($name);
    $namestr .= "_$hash";

    return $namestr;
}

# get a hashcode from a string. stolen from:
# http://poeticcode.wordpress.com/2008/03/10/perl-string-hashcode/
sub string_hash {
    my $hash = 0;
    use integer;
    foreach(split //,shift) {
        $hash = 31*$hash+ord($_);
    }
    return abs($hash);
}
